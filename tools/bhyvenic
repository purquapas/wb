#!/usr/local/bin/cbsd
#v11.0.0
MYARG=""
MYOPTARG="alljails shownode display node header mode jname"
MYDESC="Operate with bhyve NICs"
CBSDMODULE="bhyve"
EXTHELP="wf_bhyve.html"
ADDHELP="alljails=1 - get jaillist from remote node\n\
shownode=1 - show nodename for jails\n\
node= only for current node\n\
header=0 don't print header\n\
display= list by comma for column. Default: jname,nic_driver,nic_slot,nic_type,nic_parent\n\
mode=rescan - rescan vhd and sync info in sql base\n"

. ${subr}
. ${system}
. ${strings}
. ${tools}

init $*

[ -z "${display}" ] && display="jname,dsk_controller,dsk_path,dsk_size"
#[ "${shownode}" = "1" ] && display="nodename,${display}"

#remove commas for loop action on header
mydisplay=$(echo ${display} |tr ',' '  ')

# upper for header
myheader=$(echo ${mydisplay} |tr '[:lower:]' '[:upper:]')

show_header()
{
	local _header="${BOLD}${myheader}${NORMAL}"
	[ ${header} -ne 0 ] && $ECHO ${_header}
}


populate_dsk_size()
{
	local dsk_fullpath="${jaildatadir}/${jname}-${jaildatapref}/${dsk_path}"

	if [ ! -f "${dsk_fullpath}" ]; then
		dsk_size="0"
		return 0
	fi

	dsk_realsize=$( du -sh ${dsk_fullpath}|/usr/bin/awk '{printf $1}' 2>/dev/null)
	dsk_size=$( stat -f "%z" ${dsk_fullpath} 2>/dev/null)

	if conv2human "$dsk_size"; then
		dsk_size=$convval
	fi

	if [ -z "${dsk_size}" ]; then
		dsk_size=0
		return 0
	fi

	[ -n "${dsk_realsize}" ] && dsk_size="${dsk_realsize}/${dsk_size}"
}


# if $1 = "Unregister" then overwrite status to "Unregister"
populate_output_data()
{
	#populate values for in output string
	for _i in ${mydisplay}; do
		_val=""
		eval _val=\$$_i
		[ -z "${_val}" ] && _val="-"

		if [ "${_i}" = "dsk_size" ]; then
			populate_dsk_size
			_val="${dsk_size}"
		fi

		if [ -z "${_status}" ]; then
			_status="${NORMAL}${_val}"
		else
			_status="${_status} ${_val}"
		fi
	done
}


# $1 - which file from. Eg: local
show_jaildata_from_sql()
{
	local _i

	#   set sqlfile for ". rcconf" including
	if [ -n "${1}" ]; then
		sqlfile="$1"
	else
		sqlfile="local"
	fi

	if [ -z "${jname}" ]; then
		alljails=$( cbsdsql ${sqlfile} SELECT jname FROM bhyvedsk| sort -u )
	else
		alljails="${jname}"
	fi

	for jname in ${alljails}; do
		_sql="SELECT jname,dsk_controller,dsk_path,dsk_slot,dsk_size FROM bhyvedsk WHERE jname=\"${jname}\""
		cbsdsql ${sqlfile} ${_sql}| while read jname dsk_controller dsk_path dsk_slot dsk_size; do
			populate_output_data
			${ECHO} ${_status}
		done
	done

}

show_remote()
{
	show_header

	[ -z "${node}" ] && node=$(cbsd node mode=list header=0 allinfo=0)

	for _n in $node; do
		nodename="${_n}"
		show_jaildata_from_sql "inv.${_n}"
	done
}

show_local()
{
	local _errcode _status

	show_header
	show_jaildata_from_sql local
}

show_dsk()
{

	if [ -n "${node}" ]; then
		show_remote
		exit
	fi

	if [ -n "${alljails}" ]; then
		show_local
		header=0
		show_remote
	else
		show_local
	fi

}


rescan_dsk()
{
	local _dsk _res
	[ -z "${jname}" ] && err 1 "${MAGENTA}Please specify ${GREEN}jname=${NORMAL}"
	. ${jrcconf}
	[ $? -eq 1 ] && err 1 "${MAGENTA}no such jail: ${GREEN}${jname}${NORMAL}"
	for _dsk in $( find ${data} -depth 1 -maxdepth 1 -name *.vhd -exec basename {} \; ); do
		_res=$( cbsdsql local "SELECT dsk_path FROM bhyvedsk WHERE jname=\"${jname}\" AND dsk_path=\"${_dsk}\"" 2>/dev/null );
		if [ -z "${_res}" ]; then
			${ECHO} "${MAGENTA}Found new disk: ${GREEN}${_dsk}${MAGENTA} for ${GREEN}${jname}${NORMAL}"
			cbsdsql local "INSERT INTO bhyvedsk ( jname,dsk_controller,dsk_path,dsk_slot ) VALUES ( \"${jname}\",\"virtio-blk\",\"${_dsk}\","0" )"
		fi
	done
}


#### MAIN
if [ "${mode}" = "rescan" ]; then
	rescan_dsk
	exit 0
fi

[ -z "${header}" ] && header=1
sqldelimer=" "
show_dsk|/usr/bin/column -t
