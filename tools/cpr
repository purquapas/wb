#!/bin/sh
#v10.0.7
globalconf="${workdir}/cbsd.conf"
CBSDMODULE="cpr"
MYARG="cdir pkglist dstdir"
MYOPTARG="ver arch basename stable new repoversion ccache pause makeconf append usegcc attach"
MYDESC="Create pkg repository"
ADDHELP="ver=head for current.\n\
stable=1 for RELENG_X\n\
dstdir= path to output packages or 'repo' for update repoversion\n\
pkglist= path to ascii file with port list for install\n\
new= 1 - new repo (remove path (default)) or 0 - continue\n\
repoversion= name of repo version (ports cfg version), default for system set\n\
ccache=1 or 0 - enable ccache (default is 0, disabled)\n\
distcc=0 or 1 - enable distcc (default is 0, disabled)\n\
makeconf= path to alternative cpr_make.conf to /etc/make.conf in chroot\n\
pause=1 - make pause (for example for chroot in env) before create pkg\n\
append=1 - do not check for dstdir in not empty\n\
usegcc=path to gcc port\n"
#set -e

TRAP=""

set -e
. ${globalconf}
set +e

. ${subr}
. ${system}
. ${strings}
. ${distccacheconf}
. ${mailconf}
. ${tools}
readconf buildworld.conf
. ${workdir}/universe.subr
init $*
. ${buildconf}

show_tmux_session()
{
	tmuxcmd=$( which tmux 2>/dev/null )
	
	[ -z "${tmuxcmd}" ] && err 1 "${MAGENTA}No such tmux${NORMAL}"

	${ECHO} "${MAGENTA}Active cpr session:${NORMAL}"
	${tmuxcmd} list-sessions 2>/dev/null| grep "\-cpr: " |cut -d : -f 1
	exit 0
}

post_action()
{
	if [ ${pause} -eq 1 ]; then
		${ECHO} "${MAGENTA}Pause before create pkg.${NORMAL}"
		${ECHO} "${MAGENTA}You can enter in jail via: ${GREEN}cbsd jlogin ${jname}${NORMAL}"
		${ECHO} "${MAGENTA}Press any key to continue.${NORMAL}"
		read pause
	fi

	${ECHO} "${MAGENTA}Creating packages... ${NORMAL}"

	chroot ${path} /bin/sh << EOF
export PACKAGES=/packages

for i in \$( pkg info -oa | cut -d : -f1 ); do
	pkg create -n -g -f txz -o \${PACKAGES}/All/ \$i
done

cd \${PACKAGES}
rm -f digests.txz packagesite.txz repo.txz
pkg repo \${PACKAGES}/
EOF

#TRAP="${TRAP} umount_paths ${path}; rm -f ${LOCKFILE} ${_tmppkglist};"
TRAP="${TRAP} /bin/rm -f ${LOCKFILE} ${_tmppkglist};"
trap "${TRAP}" HUP INT ABRT BUS TERM EXIT

DT_END=$( date +%s )
DT_DIFF=$((DT_END - DT_START))

[ $ccache -eq 1 ] && copy_ccachedir_from_chroot
# test for port_log from portmater and send broken build log to email
#set +o errexit
#A=$( ls ${path}/tmp/port_log* 2>/dev/null )

#if [ -n "${A}" ]; then
#       if [ -n "${CBSDRCPT}" ]; then
#               send_notification -s "[CBSD ${nodename}] cpr ${ver} ${arch}-${target_arch} ${repoversion} failed. See message below and next message for datail" -f ${path}/tmp/build.log
#               sleep 5 # delay for correct message order ;)
#               send_notification -s "[CBSD ${nodename}] cpr ${ver} ${arch}-${target_arch} ${repoversion} broken build log" -f ${A}
#       fi
#       /bin/cat ${A}
#       err 1 "Build packages.sh error"
#fi

	if [ "${dstdir}" = "repo" ]; then
		find ${path}/packages/All -type f -name \*.txz -exec mv -f {} ${MYPKGDIR}/ \;
		ROOTPKGDIR="${MYPKGDIR}"
	else
		find ${path}/packages/All -type f -name \*.txz -exec cp -n {} ${MYPKGDIR}/ \;
		ROOTPKGDIR="${dstdir}"
		mkdir -p ${ROOTPKGDIR}
		mv ${path}/packages/* ${ROOTPKGDIR}/
	fi

	# create pkg in symlinked /Latest location (see pkg-repository(5))
	cd ${ROOTPKGDIR}
	ln -sf ./All ./Latest
	cd ${ROOTPKGDIR}/All
	find ./ -type f -name pkg-[0-9]* -exec ln -sf {} ./pkg.txz \;

	/usr/local/bin/cbsd jstop ${jname}

	send_notification -s "[CBSD ${nodename}] cpr ${ver} ${arch} ${repoversion} complete" -b "${DT_END}"
}


# $1 - src-session name
init_tmux()
{
	local src_session

	src_session="${1}"

	if [ "${tmux_cpr}" != "1" -o -z "${src_session}" ]; then
		tmux_cpr=0
		return 0
        fi

	tmuxcmd=$( which tmux 2>/dev/null )

	session_name="${src_session}"

	if [ -n "${tmuxcmd}" ]; then
		# tmux here and we preferred them
		return 0
	fi

	# no tmux here
	tmux_cpr=0
	return 0

}

umount_temp_dirs()
{
	# when error before path, we do not have any mounts by scripts
	[ -z "${path}" -o ! -d "${path}" ] && return 0

	umount_paths ${path}

	#destroy md disk when he used
	if [ "${CCACHEFS}" = "mdfs" -a -n "${MDDEV}" ]; then
		${ECHO} "${MAGENTA}Destroy md drive: ${GREEN}${MDDEV}${NORMAL}"
		mdconfig -d -u ${MDDEV}
	fi
}

mount_temp_dirs()
{
	local _tmpfstab="${ftmpdir}/mount_temp_dirs.$$"

	TRAP="${TRAP} rm -f ${_tmpfstab};"
	trap "${TRAP}" HUP INT ABRT BUS TERM EXIT

	if [ -z "${repoversion}" -o "${repoversion}" = "default" ]; then
		PORTSCFG_SRC="/var/db/ports"
		MYPKGDIR="${PKGDIRROOT}/default"
	else
		PORTSCFG_SRC="${dbdir}/ports-${repoversion}"
		MYPKGDIR="${PKGDIRROOT}/${repoversion}"
	fi

	[ ! -d "${PORTSCFG_SRC}" ] && mkdir -p ${PORTSCFG_SRC}
	[ ! -d "${MYPKGDIR}" ] && mkdir -p ${MYPKGDIR}

    /bin/cat >> ${_tmpfstab} << EOF
${PORTSCFG_SRC} /var/db/ports ${NULLFS} rw 0 0
${MYPKGDIR} /tmp/packages ${NULLFS} rw 0 0
EOF

	cbsd mountfstab jroot=$path fstab=${_tmpfstab} jname="${jname}"
	rm -f ${_tmpfstab}
}


prepare_chroot()
{
	${ECHO} "${MAGENTA}Building packages... ${NORMAL}"

	[ "$ccache" = "1" ] && NEEDEDPORTS="${NEEDEDPORTS} /usr/ports/devel/ccache"
	[ "$distcc" = "1" ] && NEEDEDPORTS="/usr/ports/devel/distcc ${NEEDEDPORTS}"
	export NEEDEDPORTS

	[ -n "${usegcc}" ] && export usegcc
	[ -f "${makeconf}" ] && cp ${makeconf} ${path}/etc/make.conf

	# remove default pkg.conf
	rm -f ${path}/etc/pkg/*.conf

	# make sure we have work dir in /tmp for parallel builds
	[ $( grep ^WRKDIRPREFIX= ${path}/etc/make.conf|wc -l )  = 0 ] && echo WRKDIRPREFIX=/tmp >> ${path}/etc/make.conf
	cp /etc/resolv.conf ${path}/etc

	touch ${path}/etc/src.conf

	chroot $path /bin/sh << EOF
/usr/sbin/service ldconfig start
#env ASSUME_ALWAYS_YES=yes pkg > /dev/null 2>&1
mv /etc/make.conf /tmp
pkg info -e pkg || make -C /usr/ports/ports-mgmt/pkg clean install
mv /tmp/make.conf /etc
pkg2ng
# remove default pkg.conf
[ -f "/usr/local/etc/pkg.conf" ] && rm -f /usr/local/etc/pkg.conf
find /tmp/usr/ports -type d -name work -exec rm -rf {} \; > /dev/null 2>&1

if [ -n "\${usegcc}" ]; then
	make -C \$usegcc install
	cp /etc/make.conf /tmp/mk.conf
	grep -v USE_GCC /tmp/mk.conf > /etc/make.conf
	echo USE_GCC=yes >> /etc/make.conf
fi

for i in \${NEEDEDPORTS}; do
		PORTNAME=\$( make -C \$i -V PORTNAME )
	if [ -f /tmp/buildcontinue ]; then
		cd /tmp/packages
		pkg info -e \$PORTNAME >/dev/null 2>&1 || {
			[ -f \${PORTNAME}.txz ] && env ASSUME_ALWAYS_YES=yes pkg add ./\${PORTNAME}.txz && echo -e "\033[40;35m\${PORTNAME} found and added from cache. \033[0m"
		}
		pkg info -e \$PORTNAME || {
			make -C \$i clean
			make -C \$i
			make -C \$i install
		}
	else
		pkg info -e \$PORTNAME && continue
		echo "Installing \$PORTNAME from \$i "
		make -C \$i install clean
	fi
done
EOF
}

copy_ccachedir_to_chroot()
{
	${ECHO} "${MAGENTA}Moving cache from storage: ${GREEN}${ccache_realdir}${MAGENTA}...${NORMAL}"
	[ ! -d "${path}/root/.ccache" ] && mkdir -p ${path}/root/.ccache
	cp -a ${ccache_realdir}/* ${path}/root/.ccache/
}

copy_ccachedir_from_chroot()
{
	[ -d "${ccache_realdir}" ] && rm -rf $ccache_realdir
	${ECHO} "${MAGENTA}Moving cache to storage${NORMAL}"
	mv ${path}/root/.ccache ${ccache_realdir}
}

[ -z "${pkglist}" -o -z "${dstdir}" ] && show_tmux_session

### MAIN
readconf cpr.conf
init_target_arch
init_srcdir
init_supported_arch
init_basedir
init_kerneldir

unset SRCCONF

if [ "$new" = "0" ]; then
	new=0
else
	new=1
fi

if [ -d "${dstdir}" ]; then
	if [ "${new}" = "1" -o "${append}" = "0" ]; then
		A=$( /bin/ls -1 ${dstdir}/ |/usr/bin/wc -l |/usr/bin/awk '{ printf $1 }' )
		[ "${A}" != "0" ] && ${ECHO} "${MAGENTA}Warning: ${GREEN}${dstdir}/${MAGENTA} is not empty. Please clean before cpr initialization:${NORMAL}" && err 1 $( /bin/ls -1 ${dstdir} )
	fi
else
	mkdir -p "${dstdir}"
fi

if [ $( uname -m ) = "i386" -a "${arch}" = "amd64" ]; then
	err 1 "Cannot install amd64 base on i386 hosts"
fi

[ -z "${makeconf}" ] && makeconf="${sharedir}/cpr_make.conf"

[ ! -f "${pkglist}" ] && err 1 "No pkglist file"

_tmppkglist=""

jname="cpr1"
cbsd jstatus jname=${jname}

if [ $? -eq 0 ]; then
	${ECHO} "${MAGENTA}No such jail. Create from template: ${GREEN}${jname}${NORMAL}"
	tpl="/usr/local/cbsd/tmp/cpr-amd64-amd64-${ver}-tpl.jconf"
	[ ! -f "${tpl}" ] && err 1 "No such profile: ${tpl}"
	cbsd jcreate jconf=${tpl} || err 1 "Error jail creation via tpl ${tpl}"
	cbsd jstart ${jname}
fi

. ${jrcconf}
[ "$baserw" = "1" ] && path=$data

if [ $jid -eq 0 ]; then
	${ECHO} "${MAGENTA}Jail is not running. Starting... ${GREEN}${jname}${NORMAL}"
	cbsd jstart ${jname}
fi

#[ -d "${path}" ] && umount_paths ${path} || true
#[ -d "${path}" -a $new -eq 1 ] && chflags -R noschg ${path} && rm -rf ${path}
#[ ! -d "${path}" -a $new -eq 0 ] && new=1
#[ ! -d "${path}" ] && mkdir ${path}
#[ $new -eq 1 ] && baserw=1 && populate_path ${BASE_DIR} ${path} ||true
#[ $new -eq 0 ] && touch ${path}/tmp/buildcontinue

if [ "${pause}" = "1" ]; then
	export pause=1
else
	export pause=0
fi

[ ! -d "${PORTSCFG_SRC}" ] && mkdir -p $PORTSCFG_SRC

#defaults
if [ "${ccache}" = "1" ]; then
	ccache=1
else
	ccache=0
fi

if [ "${distcc}" = "1" ]; then
	distcc=1
else
	distcc=0
fi

#TRAP="${TRAP} umount_paths ${path}; rm -f ${LOCKFILE} ${_tmppkglist};"
#trap "${TRAP}" HUP INT ABRT BUS TERM EXIT
mount_temp_dirs

#[ "${MOUNT_PORTS}" = "0" -a $new -eq 1 ] && chroot ${path} portsnap fetch extract

prepare_chroot

if [ $ccache -eq 1 -o $distcc -eq 1 ]; then
	prepare_make_conf ${makeconf} ${path}/etc/make.conf
fi

DT_START=$( date +%s )
send_notification -s "[CBSD ${nodename}] cpr ${ver} ${arch} ${repoversion} started" -b "${DT_START}"
cp ${sharedir}/cpr_packages.sh ${path}/tmp/cpr_packages.sh

grep -v "^#" ${pkglist} > ${path}/tmp/ports_list.txt

if [ $ccache -eq 1 ]; then
	ccache_prefix="cbsd cpr $ver $arch ${target_arch} $basename"
	ccache_dir="/var/cache/ccache"

	if ! init_ccache_dir; then
		ccache=0
	else
		copy_ccachedir_to_chroot
	fi
fi

jexec="cbsd jexec jname=${jname} sh /tmp/cpr_packages.sh"

init_tmux "${jname}-cpr"

if [ $tmux_cpr -eq 1 ]; then
	${tmuxcmd} list-sessions | ${GREP_CMD} -qwF "${session_name}:"
	if [ $? -eq 1 ]; then
		echo "${tmuxcmd} new -s ${session_name}"
		${tmuxcmd} new -s "${session_name}" "eval ${jexec}"
	else
		${tmuxcmd} attach-session -t "${session_name}"
	fi
else
	eval "${jexec}"
fi

#if [ $tmux_cpr -ne 1 ]; then
	post_action
#fi

