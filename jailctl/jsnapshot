#!/usr/local/bin/cbsd
#v10.1.4
MYARG="mode"
MYOPTARG="jname snapname snapfs header display"
MYDESC="Jail snapshot management"
ADDHELP="mode can: list, create, destroy, destroyall, clone, rollback\n\
snapfs can be: rsync\n\
snapname can be: \"gettimeofday\" or any arbitrary word\n\
header=0 don't print header\n\
display= list by comma for column. Default: snapname,jname,creation,used\n"
CBSDMODULE="jail"

. ${subr}
. ${strings}
init $*

show_header()
{
	local _header="${BOLD}${myheader}${NORMAL}"
	[ ${header} -ne 0 ] && $ECHO ${_header}
}


check_jname()
{
	[ -z "${jname}" ] && err 1 "${MAGENTA}Please set ${GREEN}jname=${NORMAL}"
	. ${jrcconf}
	[ $? -eq 1 ] && err 1 "${MAGENTA}No such jail: ${GREEN}${jname}${NORMAL}"
}

zfs_snapshot_list()
{
	local _mod _fs _p1 _jname _createtime _status _snaptime _snapname _used
	[ -n "${jname}" ] && _mod="${ZPOOL}/${jname}"

	show_header

	for _fs in $( /sbin/zfs list -H -r -t snapshot -o name ${_mod} 2>/dev/null ); do
		_status=""
		_jname=$( /sbin/zfs get -H -o value -s local cbsdsnap:jname "${_fs}" 2>/dev/null )
		[ -z "${_jname}" ] && continue
		[ -n "${jname}" -a "${jname}" != "${_jname}" ] && continue
		_snapname=$( /sbin/zfs get -H -o value -s local cbsdsnap:snapname "${_fs}" 2>/dev/null )
		[ -z "${_snapname}" ] && continue
		#populate values for in output string
		for _i in ${mydisplay}; do
			case "${_i}" in
				"snapname")
					_status="${_status}${_snapname} "
					;;
				"jname")
					_status="${_status}${_jname} "
					;;
				"creation")
					_createtime=$( /sbin/zfs get -H -o value creation "${_fs}" 2>/dev/null )
					_snaptime=$( date -j -f "%a %b %d %H:%M %Y" "${_createtime}" "+%Y-%m-%d__%H:%M" )
					_status="${_status}${_snaptime} "
					;;
				"used")
					_used=$( /sbin/zfs get -H -o value used "${_fs}" 2>/dev/null )
					_status="${_status}${_used} "
					;;
			esac
		done
		${ECHO} "${NORMAL}${_status}"
	done
}

zfs_snapshot_destroyall()
{
	local _fs _jname _mod _snapname

	[ -n "${jname}" ] && _mod="${ZPOOL}/${jname}"

	for _fs in $( /sbin/zfs list -H -r -t snapshot -o name ${_mod} 2>/dev/null ); do
		_jname=$( /sbin/zfs get -H -o value -s local cbsdsnap:jname "${_fs}" 2>/dev/null )
		[ -z "${_jname}" ] && continue
		[ -n "${jname}" -a "${jname}" != "${_jname}" ] && continue
		_snapname=$( /sbin/zfs get -H -o value -s local cbsdsnap:snapname "${_fs}" 2>/dev/null )
		[ -z "${_snapname}" ] && continue
		zfs_snapshot_destroy ${_fs} && ${ECHO} "${MAGENTA}zfs snapshot for ${jname} destoyed: ${GREEN}${_snapname}${NORMAL}"
	done
}


zfs_snapshot_destroy_by_snapname()
{
	local _fs _jname _mod _snapname _chkloop=0

	[ -z "${snapname}" ] && err 1 "${MAGENTA}Please set ${GREEN}snapname=${MAGENTA} or use ${GREEN}mode=destroyall ${MAGENTA}to destroy all snapshots for this jail${NORMAL}"
	[ -n "${jname}" ] && _mod="${ZPOOL}/${jname}@${snapname}"

	for _fs in $( /sbin/zfs list -H -r -t snapshot -o name ${_mod} 2>/dev/null ); do
		_chkloop=$(( _chkloop + 1 ))
		# normally we never got _chkloop greater than 1
		[ ${_chkloop} -gt 10 ] && err 1 "${MAGENTA}Error for parsing snapname in zfs_snapshot_destroy_by_snapname${NORMAL}"
		_jname=$( /sbin/zfs get -H -o value -s local cbsdsnap:jname "${_fs}" 2>/dev/null )
		[ -z "${_jname}" ] && continue
		[ -n "${jname}" -a "${jname}" != "${_jname}" ] && continue
		_snapname=$( /sbin/zfs get -H -o value -s local cbsdsnap:snapname "${_fs}" 2>/dev/null )
		[ -z "${_snapname}" -o "${_snapname}" != "${snapname}" ] && continue
		zfs_snapshot_destroy ${_fs} && ${ECHO} "${MAGENTA}zfs snapshot for ${jname} destoyed: ${GREEN}${_snapname}${NORMAL}"
		# if cycle is not end than something wrong with parsing of snapname
	done
}

rsync_snapshot_list()
{
	err 1 "${MAGENTA}jsnapshot: rsync not implemented${NORMAL}"
}

ufs_snapshot_list()
{
	err 1 "${MAGENTA}jsnapshot: ufs not implemented${NORMAL}"
	fs_type="ufs"

	for snap in $( snapinfo $fs_dir 2>/dev/null ); do
		[ ! -f $snap ] && continue

		#   determine sizes
		fs_size=$( df -k $fs_dir | tail -n1 | /usr/bin/awk '{ print $2; }' )
		used_size=$( df -k $fs_dir | tail -n1 | /usr/bin/awk '{ print $3; }' )
		snap_size=$( du -k $snap | /usr/bin/awk '{ print $1; }' )

		#   determine snapshot creation time
		if [ ".$verbose" = .yes ]; then
			snap_time=$( stat -f "%B" $snap )
			snap_time=$( date -r "$snap_time" "+%Y-%m-%dT%H:%M" )
		fi

		#   calculate percentages
		snap_percent=` echo . | /usr/bin/awk '{ printf("%.1f%%", (snap / fs) * 100); }' snap="$snap_size" fs="$fs_size" `
		used_percent=` echo . | /usr/bin/awk '{ printf("%.1f%%", (used / fs) * 100); }' used="$used_size" fs="$fs_size" `

		#   canonicalize for output
		fs_size=$( canonksize $fs_size )
		snap_size=$( canonksize $snap_size )
		used_size=$( canonksize $used_size )
		snap_file=`echo "$snap" | /usr/bin/sed -e 's;.*/\([^/]*\)$;\1;'`

		#   output snapshot information
		if [ ".$verbose" = .yes ]; then
			printf "%-15s %4s %8s %7s %8s %7s  %-15s %s\n" "$fs_dir" "$fs_type" "$used_size" "$used_percent" "$snap_size" "$snap_percent" "$snap_file" "$snap_time"
		else
			printf "%-15s %8s %7s %8s %7s  %-15s\n" "$fs_dir" "$used_size" "$used_percent" "$snap_size" "$snap_percent" "$snap_file"
		fi
	done
}

zfs_snapshot_create()
{
	local _tst _createtime

	[ -z "${snapname}" ] && err 1 "${MAGENTA}Empty ${GREEN}snapname=${NORMAL}"

	_createtime=$( date "+%Y%m%d%H%M%S" )
	[ "${snapname}" = "gettimeofday" ] && snapname=${_createtime}

	_tst=$( /sbin/zfs snapshot ${ZPOOL}/${jname}@${snapname} 2>&1)
	[ $? -ne 0 ] && err 1 "${MAGENTA}zfs snapshot error: ${NORMAL}${_tst}"
	/sbin/zfs set cbsdsnap:jname=${jname} ${ZPOOL}/${jname}@${snapname}
	/sbin/zfs set cbsdsnap:snapname=${snapname} ${ZPOOL}/${jname}@${snapname}
}

ufs_snapshot_create()
{
	err 1 "${MAGENTA}jsnapshot: ufs not implemented${NORMAL}"
}

rsync_snapshot_create()
{
	err 1 "${MAGENTA}jsnapshot: rsync not implemented${NORMAL}"
}

zfs_snapshot_destroy()
{
	[ -z "${1}" ] && return 1
	/sbin/zfs destroy ${1}
}

ufs_snapshot_destroy()
{
	err 1 "${MAGENTA}jsnapshot: ufs not implemented${NORMAL}"
}

ufs_snapshot_destroyall()
{
	err 1 "${MAGENTA}jsnapshot: ufs not implemented${NORMAL}"
}

ufs_snapshot_destroy_by_snapname()
{
	err 1 "${MAGENTA}jsnapshot: ufs not implemented${NORMAL}"
}

rsync_snapshot_destroy()
{
	err 1 "${MAGENTA}jsnapshot: rsync not implemented${NORMAL}"
}


zfs_snapshot_rollback()
{
	local _createtime _fs _snapname _jname
	[ -z "${snapname}" ] && err 1 "${MAGENTA}empty ${GREEN}snapname=${NORMAL}"
	_fs="${ZPOOL}/${jname}@${snapname}"

	_jname=$( /sbin/zfs get -H -o value -s local cbsdsnap:jname "${_fs}" 2>/dev/null)
	[ -z "${_jname}" ] && err 1 "${MAGENTA}no such snapshot ${snapname} for ${jname}${NORMAL}"
	[ -n "${jname}" -a "${jname}" != "${_jname}" ] && err "${MAGENTA}Found snapshot ${GREEN}${snapname}${MANGETA} but its owner is ${GREEN}${_jname}${NORMAL}"
	_snapname=$( /sbin/zfs get -H -o value -s local cbsdsnap:snapname "${_fs}" )
	[ -z "${_snapname}" ] && err 1 "${MAGENTA}Snapshot found but he is not created by ${GREEN}cbsd${NORMAL} - skipp${NORMAL}"
	 _createtime=$( /sbin/zfs get -H -o value creation "${_fs}" )
	/sbin/zfs rollback -r ${_fs} && ${ECHO} "${MAGENTA}Restored state to ${GREEN}${snapname}${MAGENTA} snapshot created in ${GREEN}${_createtime}${NORMAL}"
}

ufs_snapshot_rollback()
{
	err 1 "${MAGENTA}jsnapshot: ufs not implemented${NORMAL}"
}

rsync_snapshot_rollback()
{
	err 1 "${MAGENTA}jsnapshot: rsync not implemented${NORMAL}"
}

#MAIN
if [ -z "${snapfs}" ]; then
	if [ "$zfsfeat" = "1" ]; then
		snapfs="zfs"
		. $zfstool
		ZPOOL=$( /sbin/zfs get -Ho value name ${jaildatadir} 2>/dev/null)
		[ -z "${ZPOOL}" ] && err 1 "${MAGENTA}Can't find ZFS pool on ${GREEN}${jaildatadir}${NORMAL}"
	else
		snapfs="ufs"
	fi
fi

[ -z "${display}" ] && display="jname,snapname,creation,used"

#remove commas for loop action on header
mydisplay=$(echo ${display} |tr ',' '  ')

# upper for header
myheader=$(echo ${mydisplay} |tr '[:lower:]' '[:upper:]')

[ -z "${header}" ] && header=1

case "${mode}" in
	"list")
		${snapfs}_snapshot_list |/usr/bin/column -t
		;;
	"create")
		check_jname
		${snapfs}_snapshot_create
		;;
	"destroy")
		check_jname
		${snapfs}_snapshot_destroy_by_snapname
		;;
	"destroyall")
		check_jname
		${snapfs}_snapshot_destroyall
		;;
	"rollback")
		check_jname
		${snapfs}_snapshot_rollback
		;;
esac
