#!/usr/local/bin/cbsd
#v10.1.0
CBSDMODULE="jail"
MYARG="jname"
MYOPTARG="dbfile mode status rcfile"
MYDESC="Register jail records to SQLite from ASCii config or re-populate ASCii config from SQLite"
ADDHELP="mode= set (apply), unset, show (show current state) or get (show limits)\n\
status= overwrite default status, for example set it to maintenace by default\n\
rcfile= alternative path to ascii rc.conf file\n"

. ${subr}
. ${strings}
. ${tools}

init $*

if [ -z "${rcfile}" ]; then
	JAILRCCONF="${jailrcconfdir}/rc.conf_${jname}"
else
	JAILRCCONF="${rcfile}"
fi

[ ! -f  ${JAILRCCONF} ] && err 1 "${MAGENTA}no conf rc.conf file for jail: ${GREEN}${jname}${NORMAL}"

insert_full()
{
	local _val _i _n _sql _sqlparam _sqlvalue _jid
	local LIMITS="${jailsysdir}/${jname}/jail.limits"

	_sqlparam="jname "
	_sqlvalue="'${jname}'"

	for _i in $JARG; do
		eval _val=\$${_i}
		[ -z "${_val}" ] && _val="0"
		_sqlparam="${_sqlparam}, ${_i}"
		_sqlvalue="${_sqlvalue}, '${_val}'"
	done

	get_jid

	_sqlparam="${_sqlparam}, jid"
	_sqlvalue="${_sqlvalue}, ${myjid}"

	_sqlparam="${_sqlparam}, status"

	if [ -z "${status}" ]; then
		if [ $myjid -gt 0 ]; then
			status="1"
		else
			status="0"
		fi
	fi

	_sqlvalue="${_sqlvalue}, ${status}"

	cbsdsql local "INSERT INTO jails ( ${_sqlparam} ) VALUES ( ${_sqlvalue} )"
	[ -f "${LIMITS}" ] && jmkrctlconf jname=${jname} type=rctl mode=tosql file=${LIMITS}
	[ -f "${LIMITS}.extra" ] && jmkrctlconf jname=${jname} type=extra mode=tosql file=${LIMITS}.extra
}

insert_bhyve()
{
	local MYCOL _val _i _n _sql _sqlparam _sqlvalue _jid

	. ${sharedir}/bhyve.conf

	_sqlparam="jname "
	_sqlvalue="'${jname}'"

	for _i in $MYCOL; do
		eval _val=\$${_i}
		# [ -z "${_val}" ] && _val="0"
		[ -z "${_val}" ] && continue

		[ "${_val}" = "jname" ] && continue
		_sqlparam="${_sqlparam}, ${_i}"

		#convert ram to bytes
		if [ "${_i}" = "vm_ram" ]; then
			# if its not number, then convert
			if is_number ${_val}; then
				conv2bytes ${_val};
				_val="${convval}"
			fi
		fi

		_sqlvalue="${_sqlvalue}, '${_val}'"
	done

	cbsdsql local "INSERT INTO bhyve ( ${_sqlparam} ) VALUES ( ${_sqlvalue} )"

	# bhyvedsk
	for last_disk in $( seq 1 16 ); do
		unset dsk_controller dsk_path dsk_slot dsk_type
		eval dsk_controller="\$dsk_controller$last_disk"
		[ -z "${dsk_controller}" ] && break
		eval dsk_path="\$dsk_path$last_disk"
		eval dsk_slot="\$dsk_slot$last_disk"
		eval dsk_type="\$dsk_type$last_disk"

		if [ -n "${virtio_type}" ]; then
			cbsdsql local "INSERT INTO bhyvedsk ( jname,dsk_controller,dsk_path,dsk_slot  ) VALUES ( \"${jname}\",\"${dsk_controller}\",\"${dsk_path}\",\"${dsk_slot}\" )"
		else
			cbsdsql local "INSERT INTO bhyvedsk ( jname,dsk_path,dsk_slot  ) VALUES ( \"${jname}\",\"${dsk_path}\",\"${dsk_slot}\" )"
		fi
	done
	
	# bhyvenic
	for last_nic in $( seq 1 16 ); do
		unset nic_order nic_driver nic_slot nic_type nic_parent nic_hwaddr

		eval nic_driver="\$nic_driver$last_nic"
		[ -z "${nic_driver}" ] && break

		eval nic_order="\$nic_order$last_nic"
		eval nic_slot="\$nic_slot$last_nic"
		eval nic_type="\$nic_type$last_nic"
		eval nic_parent="\$nic_parent$last_nic"
		eval nic_hwaddr="\$nic_hwaddr$last_nic"

		cbsdsql local "INSERT INTO bhyvenic ( jname,nic_order,nic_driver,nic_slot,nic_type,nic_parent,nic_hwaddr  ) VALUES ( \"${jname}\",\"${nic_order}\",\"${nic_driver}\",\"${nic_slot}\",\"${nic_type}\",\"${nic_parent}\",\"${nic_hwaddr}\" )"
	done
}


insert_virtualbox()
{
	local MYCOL _val _i _n _sql _sqlparam _sqlvalue _jid

	. ${sharedir}/virtualbox.conf

	_sqlparam="jname "
	_sqlvalue="'${jname}'"

	for _i in $MYCOL; do
		eval _val=\$${_i}
		# [ -z "${_val}" ] && _val="0"
		[ -z "${_val}" ] && continue

		[ "${_val}" = "jname" ] && continue
		_sqlparam="${_sqlparam}, ${_i}"

		#convert ram to bytes
		if [ "${_i}" = "vm_ram" ]; then
			# if its not number, then convert
			if is_number ${_val}; then
				conv2bytes ${_val};
				_val="${convval}"
			fi
		fi

		_sqlvalue="${_sqlvalue}, '${_val}'"
	done

	cbsdsql local "INSERT INTO virtualbox ( ${_sqlparam} ) VALUES ( ${_sqlvalue} )"

	# bhyvedsk
	for last_disk in $( seq 1 16 ); do
		unset dsk_controller dsk_path dsk_slot dsk_type
		eval dsk_controller="\$dsk_controller$last_disk"
		[ -z "${dsk_controller}" ] && break
		eval dsk_path="\$dsk_path$last_disk"
		eval dsk_slot="\$dsk_slot$last_disk"
		eval dsk_type="\$dsk_type$last_disk"

		if [ -n "${virtio_type}" ]; then
			cbsdsql local "INSERT INTO virtualboxdsk ( jname,dsk_controller,dsk_path,dsk_slot  ) VALUES ( \"${jname}\",\"${dsk_controller}\",\"${dsk_path}\",\"${dsk_slot}\" )"
		else
			cbsdsql local "INSERT INTO virtualboxdsk ( jname,dsk_path,dsk_slot  ) VALUES ( \"${jname}\",\"${dsk_path}\",\"${dsk_slot}\" )"
		fi
	done
	
	# bhyvenic
	for last_nic in $( seq 1 16 ); do
		unset nic_order nic_driver nic_slot nic_type nic_parent nic_hwaddr

		eval nic_driver="\$nic_driver$last_nic"
		[ -z "${nic_driver}" ] && break

		eval nic_order="\$nic_order$last_nic"
		eval nic_slot="\$nic_slot$last_nic"
		eval nic_type="\$nic_type$last_nic"
		eval nic_parent="\$nic_parent$last_nic"
		eval nic_hwaddr="\$nic_hwaddr$last_nic"

		cbsdsql local "INSERT INTO virtualboxnic ( jname,nic_order,nic_driver,nic_slot,nic_type,nic_parent,nic_hwaddr  ) VALUES ( \"${jname}\",\"${nic_order}\",\"${nic_driver}\",\"${nic_slot}\",\"${nic_type}\",\"${nic_parent}\",\"${nic_hwaddr}\" )"
	done
}


insert_xen()
{
	local MYCOL _val _i _n _sql _sqlparam _sqlvalue _jid

	. ${sharedir}/xen.conf

	_sqlparam="jname "
	_sqlvalue="'${jname}'"

	for _i in $MYCOL; do
		eval _val=\$${_i}
		# [ -z "${_val}" ] && _val="0"
		[ -z "${_val}" ] && continue

		[ "${_val}" = "jname" ] && continue
		_sqlparam="${_sqlparam}, ${_i}"

		#convert ram to bytes
		if [ "${_i}" = "vm_ram" ]; then
			# if its not number, then convert
			if is_number ${_val}; then
				conv2bytes ${_val};
				_val="${convval}"
			fi
		fi

		_sqlvalue="${_sqlvalue}, '${_val}'"
	done

	cbsdsql local "INSERT INTO xen ( ${_sqlparam} ) VALUES ( ${_sqlvalue} )"

	# bhyvedsk
	for last_disk in $( seq 1 16 ); do
		unset dsk_controller dsk_path dsk_slot dsk_type
		eval dsk_controller="\$dsk_controller$last_disk"
		[ -z "${dsk_controller}" ] && break
		eval dsk_path="\$dsk_path$last_disk"
		eval dsk_slot="\$dsk_slot$last_disk"
		eval dsk_type="\$dsk_type$last_disk"

		if [ -n "${virtio_type}" ]; then
			cbsdsql local "INSERT INTO xendsk ( jname,dsk_controller,dsk_path,dsk_slot  ) VALUES ( \"${jname}\",\"${dsk_controller}\",\"${dsk_path}\",\"${dsk_slot}\" )"
		else
			cbsdsql local "INSERT INTO xendsk ( jname,dsk_path,dsk_slot  ) VALUES ( \"${jname}\",\"${dsk_path}\",\"${dsk_slot}\" )"
		fi
	done

	# bhyvenic
	for last_nic in $( seq 1 16 ); do
		unset nic_order nic_driver nic_slot nic_type nic_parent nic_hwaddr

		eval nic_driver="\$nic_driver$last_nic"
		[ -z "${nic_driver}" ] && break

		eval nic_order="\$nic_order$last_nic"
		eval nic_slot="\$nic_slot$last_nic"
		eval nic_type="\$nic_type$last_nic"
		eval nic_parent="\$nic_parent$last_nic"
		eval nic_hwaddr="\$nic_hwaddr$last_nic"

		cbsdsql local "INSERT INTO xennic ( jname,nic_order,nic_driver,nic_slot,nic_type,nic_parent,nic_hwaddr  ) VALUES ( \"${jname}\",\"${nic_order}\",\"${nic_driver}\",\"${nic_slot}\",\"${nic_type}\",\"${nic_parent}\",\"${nic_hwaddr}\" )"
	done
}


delete_full()
{
	[ -z "${jname}" ] && return 0
	cbsdsql local DELETE FROM jails WHERE jname=\"${jname}\"
	cbsdsql local DELETE FROM rctl WHERE jname=\"${jname}\" 2>/dev/null
	cbsdsql local DELETE FROM bhyve WHERE jname=\"${jname}\" 2>/dev/null
	cbsdsql local DELETE FROM virtualbox WHERE jname=\"${jname}\" 2>/dev/null
	cbsdsql local DELETE FROM xen WHERE jname=\"${jname}\" 2>/dev/null
}

# MAIN
# load defaults
readconf jail-freebsd-default.conf
. ${JAILRCCONF}

[ -z "${dbfile}" ] && dbfile="${dbdir}/local.sqlite"
[ ! -f "${dbfile}" ] && err 1 "${MAGENTA}inventorydb not found. You must create them first via misc/updatesql: ${GREEN}${dbfile}${NORMAL}"

. ${sharedir}/jail-arg

delete_full
insert_full

case "${emulator}" in
	"bhyve")
		insert_bhyve
		;;
	"virtualbox")
		insert_virtualbox
		;;
	"xen")
		insert_xen
		;;
esac

[ ! -d "${jailsysdir}/${jname}" ] && /bin/mkdir -p ${jailsysdir}/${jname}
/bin/mv ${JAILRCCONF} ${jailsysdir}/${jname}
