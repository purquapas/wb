#!/usr/local/bin/cbsd
#v10.1.2
MYARG=""
MYOPTARG="jname inter debug"
MYDESC="Start jail"
ADDHELP="inter=0 to prevent any questions and to accept answers by default\n"
CBSDMODULE="xen"
EXTHELP="wf_jstop_jstart.html"

. ${subr}
. ${system}
. ${strings}
. ${workdir}/universe.subr
. ${workdir}/xen.subr
. ${tools}

readconf buildworld.conf
readconf jail-freebsd-default.conf
. ${workdir}/xen.subr

[ -z "${1}" ] && select_jail_by_list -s "List of offline VMs" -a "Off" -e xls -r ${sqlreplica}
init $*

. ${workdir}/fetch.subr

# MAIN for multiple jails
TRAP=""

if [ $# -gt 1 -a -z "${jname}" ]; then
	# multiple astart always non interactive
	export inter=0
	# recursive
	JLIST=$*
	for jname in ${JLIST}; do
		[ "${jname}" = "inter=0" ] && continue
		TRAP="${TRAP} /bin/rm -f ${ftmpdir}/xstart.${jname}.$$;"
		trap "${TRAP}" HUP INT ABRT BUS TERM EXIT
		/usr/sbin/daemon -p ${ftmpdir}/xstart.${jname}.$$ /usr/local/bin/cbsd xstart inter=${inter} jname=${jname}
		#lets save .pid file
		sleep 1
		[ -f "${ftmpdir}/xstart.${jname}.$$" ] && cbsd_pwait --pid=$( /bin/cat ${ftmpdir}/xstart.${jname}.$$ ) --timeout=${parallel}
		trap "" HUP INT ABRT BUS TERM EXIT
		# Artificial delay to create a sequence (for order compliance)
		# todo: determine VM complete starting
		sleep 12
	done

	wait_for_fpid start ${parallel}
	err 0 "${MAGENTA}Multiple xstart: ${GREEN}done${NORMAL}"
fi


make_freebsd_part()
{
/bin/cat >> $1 << EOF

# $vm_os_type specific:
builder = "hvm"
serial="pty"
vncconsole=1
EOF
}

make_linux_part()
{

#	case "${vm_boot}" in
#		"cd")
#			isodir=$( /usr/bin/mktemp -d )
#			mddev=$( /sbin/mdconfig -a -t vnode -f ${iso_img} )
#			/sbin/mount_cd9660 /dev/${mddev} ${isodir}

#			if [ -f ${isodir}/${iso_vmlinuz_file} ]; then
#				/bin/cp -a ${isodir}/${iso_vmlinuz_file} ${jailsysdir}/${jname}/iso_vmlinuz
#				echo "kernel = \"${jailsysdir}/${jname}/iso_vmlinuz\"" >> ${1}
#			else
#				${ECHO} "${MAGENTA}No ${GREEN}${isodir}/${iso_vmlinuz_file}${NORMAL}"
#			fi

#			if [ -f ${isodir}/${iso_initrd_file} ]; then
#				/bin/cp -a ${isodir}/${iso_initrd_file} ${jailsysdir}/${jname}/iso_initrd
#				echo "ramdisk = \"${jailsysdir}/${jname}/iso_initrd\"" >> ${1}
#			else
#				${ECHO} "${MAGENTA} No ${GREEN}${isodir}/${iso_initrd_file}${NORMAL}"
#			fi
#			/sbin/umount ${isodir}
#			/sbin/mdconfig -d -u ${mddev}
#	esac
/bin/cat >> $1 << EOF

# $vm_os_type specific:
builder = "hvm"
#kernel = "/mnt/iso/isolinux/vmlinuz"
#ramdisk = "/mnt/iso/isolinux/initrd.img"
#extra = "debian-installer/exit/always_halt=true -- console=hvc0"
#sdl=1
serial='pty'
EOF
}

make_windows_part()
{
/bin/cat >> $1 << EOF

# $vm_os_type specific:
builder='hvm'
acpi = 1
EOF
}

make_other_part()
{
/bin/cat >> $1 << EOF

# $vm_os_type specific:
builder='hvm'
EOF
}



# MAIN
init_xen

[ -z "$jname" ] && jname=$1
. ${jrcconf}
[ $? -eq 1 ] && err 1 "${MAGENTA}No such jail: ${GREEN}${jname}${NORMAL}"
[ ${status} -eq 2 ] && err 1 "${MAGENTA}Jail in slave mode. Please ${GREEN}cbsd jswmode mode=master${MAGENTA} first${NORMAL}"
[ $jid -ne 0 ] && err 1 "${MAGENTA}Jail ${jname} already running, jid: ${GREEN}${jid}${NORMAL}"
[ "${emulator}" != "xen" ] && err 1 "${MAGENTA}Not xen mode${NORMAL}"
[ -z "${vm_ram}" -o -z "${vm_cpus}" -o -z "${vm_os_type}" ] && err 1 "${MAGENTA}Parameter is mandatory: ${GREEN}vm_ram, vm_cpus, vm_os_type${NORMAL}"


# hardcoded first disk path from SQL. Todo: mark bootable disk(s)
MDFILE=$( cbsdsql local SELECT dsk_path FROM ${emulator}dsk WHERE jname=\"${jname}\" AND dsk_type=\"vhd\" LIMIT 1 2>/dev/null )

case "${vm_vnc_port}" in
	0)
		vm_port=$( get_next_rd_port )
		vnc_args="--vrde on --vrdeport ${vm_port}"
		vncdisplay=$(( ${vm_port} - 5900 ))
		${ECHO} "${MAGENTA}VRDP is enabled. VNC port: ${GREEN}${vm_port}. ${MAGENTA}VNC pass: ${GREEN}cbsd${NORMAL}${NORMAL}"
		;;
	1)
		vm_port=0
		vnc_args="--vrde off"
		;;
	*)
		vm_port=${vm_vnc_port}
		vnc_args="--vrde on --vrdeport ${vm_port}"
		;;
esac

cbsdsql local UPDATE xen SET vm_rd_port=\"${vm_port}\" WHERE jname=\"${jname}\"

if [ "${interface}" != "auto" ]; then
	# check for interface exist
	_res=$( ${miscdir}/nics-list -s "lo" |while read _iface; do
		[ "${interface}" = "${_iface}" ] && echo "${_iface}" ] && exit 0
	done )
	[ -z "${_res}" ] && err 1 "${MAGENTA}No such interface: ${GREEN}${interface}${NORMAL}"
else
	auto_iface=$( /sbin/route -n get 0.0.0.0 |/usr/bin/awk '/interface/{print $2}' )
	[ -z "${auto_iface}" ] && err 1 "${MAGENTA}Can't determine uplink interface${NORMAL}"
	interface="${auto_iface}"
fi

xvm_ram=$(( vm_ram / 1024 / 1024  ))

readconf vm-${vm_os_type}-${vm_os_profile}.conf
[ -z "${vm_profile}" ] && err 1 "${MAGENTA}No such profile: ${GREEN}vm-${vm_os_type}-${vm_os_profile}.conf${NORMAL}"
# re-read jail params and apply personal after profile
. ${jrcconf}

check_for_empty_hdd
init_iso
if [ $? -eq 1 -a "${vm_boot}" = "cd" ]; then
	printf "${MAGENTA}Continue without ${iso_img}. Hope this is ok, sleep for 5 seconds ${NORMAL}"
	for i in $( jot 5 ); do
		printf "."
		sleep 1
	done
	echo
fi

[ "${vm_iso_path}" != "0" ] && iso_img="${vm_iso_path}"

kernel_dir="${srcdir}/iso"

if [ -r "${iso_img}" ]; then
	${ECHO} "${MAGENTA}Attaching as DVD-DRIVE: ${GREEN}${iso_img}${NORMAL}"
#	${VBOX_MGMT_CMD} storageattach ${jname} --storagectl "IDE Controller" --port 1 --device 0 --type dvddrive --medium ${iso_img}
fi

${ECHO} "${MAGENTA}Boot from: ${GREEN}${vm_boot}${NORMAL}"

XENCFG="${jailsysdir}/${jname}/xen.cfg"
/usr/bin/truncate -s0 ${XENCFG}

case "${vm_boot}" in
	"hdd")
		boot_arg='boot="c"'
		;;
	"cd")
		boot_arg='boot="d"'
		;;
esac

cat >> ${XENCFG} << EOF
name = "${jname}"
memory = ${xvm_ram}
vcpus = ${vm_cpus}

# Network devices
vif = [ 'bridge=bridge0' ]

#disk = ['phy:/dev/zvol/zroot/debian,xvda,w','file:/usr/jails/src/iso/debian-7.8.0-amd64-CD-1.iso,hdc:cdrom,r']
disk =  ['${data}/${MDFILE},raw,hda,rw','${iso_img},raw,hdc:cdrom,r' ]

${boot_arg}

vnc = 1
vnclisten = "0.0.0.0"
vncpasswd="cbsd"
vncdisplay="${vncdisplay}"
opengl=1
vncconsole=1
vncunused=0
EOF


case "${vm_os_type}" in
	"freebsd")
		make_freebsd_part ${XENCFG}
		;;
	"linux")
		make_linux_part ${XENCFG}
		;;
	"windows")
		make_windows_part ${XENCFG}
		;;
	"other")
		make_windows_part ${XENCFG}
		;;
esac

xl_cmd="cd $kernel_dir && ${XL_CMD} create -c ${XENCFG}"

compile_nic_args
echo "[debug]: $xl_cmd"
${tmuxcmd} -2 new -d -s "cbsd-${jname}" "eval ${xl_cmd}"
exit 0
