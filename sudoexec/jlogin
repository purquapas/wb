#!/usr/local/bin/cbsd
#v10.1.2
MYARG=""
MYOPTARG="jname remote inter src_session"
MYDESC="Exec login into jail"
CBSDMODULE="jail"
ADDHELP="remote=1 - prevent to searching in remote node base. For the avoid the looping\n"
EXTHELP="wf_jlogin.html"

# Login by jid not supported yet

. ${subr}
. ${strings}
. ${tools}

init $*

readconf jlogin.conf

try_remote()
{
	[ "${remote}" = "1" ] && err 1 "${MAGENTA}No such jail${NORMAL}"
	RHST=$( jwhereis ${jname}|head -n1 )
	[ -z "${RHST}" ] && err 1 "No such jail for login"

	# we don't need for interactive when come with remote=2 from select_jail_by_list
	if [ "${remote}" != "2" -a "${always_rlogin}" = "0" ]; then
		getyesno "Found jail on remote node: ${RHST}. Try to login?"
		[ $? -eq 1 -o $? -eq 3 ] && err 1 "No such jail for login"
	fi

	rexe node=${RHST} cbsd jlogin src_session=${nodename} jname=$jname remote=1
	err 0 ""
}

init_tmux()
{
	if [ "${tmux_login}" != "1" -o -z "${src_session}" ]; then
		tmux_login=0
		return 0
	fi

	tmuxcmd=$( which tmux 2>/dev/null )

	src_session="$( whoami )-nodename"
	session_name="${src_session}-${jname}"

	if [ -n "${tmuxcmd}" ]; then
		# tmux here and we preferred them
		return 0
	fi

#	tmuxcmd=$( which screen  2>/dev/null )

#	if [ -n "${tmuxcmd}" ]; then
#		# screen here
#		return 0
#	fi

	# no tmux here
	tmux_login=0
	return 0

}

[ -z "$jname" ] && jname=$1
[ -z "$jname" ] && select_jail_by_list -s "List of online jail" -a "On" -r ${sqlreplica}
[ -z "$jname" ] && err 1 "${MAGENTA}Please specify jname as argument${NORMAL}"
[ -z "${remote}" ] && remote=0

validate_jname ${jname}
[ $? -ne 1 ] && err 1 "${MAGENTA}Bad jname${NORMAL}"

. ${jrcconf}
[ $? -eq 1 ] && try_remote
[ "${emulator}" = "bhyve" ] && err 1 "${MAGENTA}For bhyve jail use: ${GREEN}cbsd blogin=${jname} ${MAGENTA}instead${NORMAL}"
[ "$baserw" = "1" ] && path=$data
[ $jid -eq 0 ] && err 1 "Not running"

#rctl/limits area
. ${workdir}/rctl.subr

nice=$( cbsdsql local SELECT nice FROM rctl WHERE jname=\"${jname}\" 2>/dev/null )
[ -z "${nice}" ] && nice="0"

if [ ${exec_fib} -eq 0 ]; then
	SETFIB=""
else
	SETFIB="setfib ${exec_fib}"
fi

if [ "${cpuset}" = "0" ]; then
	CPUSET=""
else
	CPUSET="cpuset -c -l ${cpuset}"
fi


case "${ver}" in
	"empty")
		# is linux?
		if [ -f "${data}/bin/bash" ]; then
			LOGIN_STR="/bin/bash"
		elif [ -f "${data}/bin/sh" ]; then
			LOGIN_STR="/bin/sh" ];
		else
			err 1 "${MAGENTA}Unknown environment, unable to login${NORMAL}"
		fi
		;;
	*)
		if [ "${emulator}" != "jail" -a -n "${emulator}" ]; then
			. ${workdir}/emulator.subr
			init_usermode_emul
			LOGIN_STR="/bin/${emulator} /usr/bin/login -f root"
		else
			LOGIN_STR="/usr/bin/login -f root"
		fi
		;;
esac

jexec="/usr/bin/nice -n ${nice} ${SETFIB} ${CPUSET} /usr/sbin/jexec ${jid} ${LOGIN_STR}"

init_tmux

if [ $tmux_login -eq 1 ]; then
	${tmuxcmd} list-sessions | ${GREP_CMD} -qwF "${session_name}:"
	if [ $? -eq 1 ]; then
		${tmuxcmd} new -s "${session_name}" "eval ${jexec}"
	else
		${tmuxcmd} attach-session -t "${session_name}"
	fi
else
	eval ${jexec}
fi
