#!/bin/sh
#v10.1.2
globalconf="${workdir}/cbsd.conf";
MYARG=""
MYOPTARG="ver stable rev scmbase dst patch"
MYDESC="Update FreeBSD source tree in $srcdir"
ADDHELP="ver=head for current.\n\
stable=1 for STABLE_X\n\
rev=XXX where XXX - svn revision\n\
scmbase - alternative svn base URL\n\
dst - alternative dst dir\n\
patchset=apply patchet\n"

set -e
. ${globalconf}
set +e

. ${subr}
readconf srcup.conf
init $*

over="${ver}"
oarch="${arch}"
ostable="${stable}"

init_svn()
{
	SCM=""

	if [ -f "/usr/bin/svnlite" ]; then
		SCM="/usr/bin/svnlite"
	elif [ -f "/usr/local/bin/svn" ]; then
		SCM="/usr/local/bin/svn"
	else
		err 1 "${MAGENTA}No svn in the base. Please install devel/subversion${NORMAL}"
	fi

	[ -z "${scmbase}" ] && scmbase="${SVNBASE}"

	if [ "${stable}" = "1" ]; then
		SCM_URL="${scmbase}/stable/${ver}"
	else
		SCM_URL="${scmbase}/releng/${ver}"
	fi

	[ "$ver" = "11.0" -o "${ver}" = "11" ] && SCM_URL="${scmbase}/head"

	return 0
}

init_git()
{
	SCM=""

	if [ -f "/usr/local/bin/git" ]; then
		SCM="/usr/local/bin/git"
	else
		err 1 "${MAGENTA}No git in the base. Please install devel/git${NORMAL}"
	fi

	[ -z "${scmbase}" ] && scmbase="${GITBASE}"
	SCM_URL="${scmbase}"

	[ -d "${dst}/.git" ] && return 0

	cd ${dst} && ${SCM} init
	${SCM} remote add origin ${SCM_URL}
	${SCM} fetch ${git_flags} origin
	return 0
}

svn_checkout()
{
	# repair and upgrade
	if [ -d "${dst}/.svn" ]; then
		cd ${dst}
		${ECHO} "${MAGENTA}Processing svn cleanup, please wait...${NORMAL}"
		${SCM} cleanup
	fi
	${ECHO} "${MAGENTA}Processing svn update...${NORMAL}"
	${SCM} checkout -r ${rev} ${SCM_URL} ${dst}
}

git_checkout()
{
	local _depth _branch

	[ "${depth}" != "0" ] && _depth="${depth}"

	[ ! -f ${sharedir}/${platform}-git_branches.conf ] && err 1 "${MAGENTA}No ${sharedir}/${platform}-git_branches.conf for git branch map${NORMAL}"
	. ${sharedir}/${platform}-git_branches.conf

	_branch=$( init_git_branch )

	[ -z "${_branch}" ] && err 1 "${MAGENTA}Empty branch from init_git_branch${NORMAL}"

	if [ -d "${dst}/.git" ]; then
#		cd ${dst} && ${SCM} checkout DragonFly_RELEASE_3_8
#		cd ${dst} && ${SCM} pull ${_depth}
		cd ${dst} && ${SCM} branch ${_branch} origin/${_branch} ||true
		${SCM} checkout ${_branch}
		${SCM} pull
	else
#echo		${SCM} clone -b ${rev} ${git_flags} ${SCM_URL} ${dst}
#		${SCM} clone -b ${rev} ${git_flags} ${SCM_URL} ${dst}
#		cd ${.CURDIR}/src && git init
#        cd ${.CURDIR}/src && \
#                git remote add origin git://${GITHOST}/dragonfly.git
#        cd ${.CURDIR}/src && git fetch origin
#        cd ${.CURDIR}/src && git branch DragonFly_RELEASE_4_0 origin/DragonFly_RELEASE_4_0
#
	    echo "CLONE"
	fi
}


### MAIN ###
. ${buildconf}
readconf buildworld.conf
. ${workdir}/universe.subr

init_distcc
init_notify
init_target_arch
init_srcdir
init_supported_arch
init_make_flags

set +e
. ${buildconf}
set -e

if [ -n "${dst}" ]; then
	dst="${srcdir}/src_${ver}/src"
else
	dst="${SRC_DIR}"
fi

LOCKFILE=${ftmpdir}/src_$( /sbin/md5 -qs ${dst} ).lock
makelock ${LOCKFILE}

[ ! -d "${dst}" ] && /bin/mkdir -p ${dst}

case "${checkout_method}" in
	svn*)
		init_svn
		svn_checkout
		;;
	git*)
		init_git
		git_checkout
		;;
	*)
		err 1 "${ECHO}Unknown checkout method. Please specify it via: ${GREEN}srcup.conf${NORMAL}"
esac

[ "${apply_cbsd_patch}" = "1" ] && /usr/local/bin/cbsd srcpatch $*

if [ ! -f "${dst}/Makefile" ]; then
	/bin/rm -rf ${dst}
	err 1 "No source code for ${ver}"
fi
