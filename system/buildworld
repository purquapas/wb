#!/bin/sh
#v10.0.3
globalconf="${workdir}/cbsd.conf";
CBSDMODULE="build"
MYARG=""
MYOPTARG="ver arch target_arch target_cputype maxjobs clean basename stable distcc ccache notify"
MYDESC="Buildworld from sources"
ADDHELP="ver=head for current.\n\
stable=1 for RELENG_X\n\
distcc=1 - enable distcc\n\
ccache=1 - enable ccache\n"

set -e
. ${globalconf}
set +e

. ${subr}
init $*

over="${ver}"
oarch="${arch}"
[ -z "${NICE}" ] && NICE="0"

. ${buildconf}
. ${distccacheconf}
. ${mailconf}
readconf buildworld.conf
. ${workdir}/universe.subr
# for checkout_method
readconf srcup.conf

init_distcc
init_notify
init_target_arch
init_srcdir
init_supported_arch
init_make_flags

if [ "${ccache}" = "1"  ]; then
	ccache_prefix="cbsd buildworld ${ver} ${arch} ${target_arch} ${basename}"
	ccache_dir="/var/cache/ccache"
	init_ccache_dir
	export CCACHE_DIR=${ccache_realdir}
	if ! ccache_check; then
		ccache=0
	fi
else
	ccache=0
fi

truncate -s0 ${ftmpdir}/make.$$.conf

export __MAKE_CONF=${ftmpdir}/make.$$.conf
[ $ccache -eq 1 -o $distcc -eq 1 ] && prepare_make_conf ${origmakeconf} ${__MAKE_CONF} && init_make_flags

LOCKFILE=${ftmpdir}/$( /sbin/md5 -qs ${MAKEOBJDIRPREFIX} ).lock
[ $notify -eq 1 ] && BLDLOG="${tmpdir}/build.$$.log"
makelock ${LOCKFILE} "rm -f ${__MAKE_CONF} ${BLDLOG}"

[ ${distcc} -eq 1 ] && export DISTCC_HOSTS="${CBSD_DISTCCHOST}"
DT_START=$( date +%s )

if [ $notify -eq 1 ]; then
	[ -z "$TAILSTRING" ] && TAILSTRING=50
	script ${BLDLOG} /usr/bin/nice -n ${NICE} /usr/bin/make $NUMJOBS -C ${SRC_DIR} buildworld ${NOCLEANUP} TARGET=${arch} TARGET_ARCH="${target_arch}"
	res=$?
else
	 /usr/bin/nice -n ${NICE} /usr/bin/make $NUMJOBS -C ${SRC_DIR} buildworld ${NOCLEANUP} TARGET=${arch} TARGET_ARCH="${target_arch}"

	res=$?
fi

DT_END=$( date +%s )
init_scm_and_version

if [ $res -ne 0 ]; then
	[ $notify -eq 1 ] && send_notification -s "[CBSD ${nodename}] buildworld ${basename} ${ver} ${arch} ${target_arch} r${svnrev} failed." -b "`tail -n${TAILSTRING} ${BLDLOG}`"
	exit 1
fi

if [ $res -eq 0 -a $notify -eq 1 ]; then
	cat > ${BLDLOG} << EOF
Start time: `date -r ${DT_START}`
End time: `date -r ${DT_END}`
EOF
	send_notification -s "[CBSD ${nodename}] buildworld ${basename} ${ver} ${arch} ${target_arch} r${svnrev} complete." -f ${BLDLOG}
	return 0
fi
